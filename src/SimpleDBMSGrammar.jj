options
{
  static = true;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SimpleDBMSParser)

import java.io.File;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

public class SimpleDBMSParser
{
  private static Environment dbEnv = null;
  private static Database db = null;

  public static void main(String args []) throws ParseException
  {
    EnvironmentConfig envConfig = new EnvironmentConfig();
    envConfig.setAllowCreate(true);
    dbEnv = new Environment(new File("db"), envConfig);

    DatabaseConfig dbConfig = new DatabaseConfig();
    dbConfig.setAllowCreate(true);
    //dbConfig.setSortedDuplicates(true);
    db = dbEnv.openDatabase(null, "db", dbConfig);

    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);

    while (true)
    {
      try
      {
        System.out.print("DB_2013-11395> ");
        parser.command();
      }
      catch (Exception e)
      {
        Message.print(Message.SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < DESC : "desc" >
| < SHOW_TABLES : "show tables" >
| < INSERT_INTO : "insert into" >
| < DELETE_FROM : "delete from" >
| < SELECT : "select" >
| < AS : "as" >
| < FROM : "from" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < VALUES : "values" >
| < NULL : "null" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < ASTERISK : "*" >
| < QUOTE : "'" >
| < COMMA : "," >
| < PERIOD : "." >
| < UNDERSCORE : "_" >
| < SIGN : "+" | "-" >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >
                        | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >
| < NON_QUOTE_SPECIAL_CHARACTERS : [ "!", "#"-"&", "("-"/", ":"-"@", "["-"`", "{"-"~" ] >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < NN : < DIGIT > < DIGIT > >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      if(db != null) db.close();
      if(dbEnv != null) dbEnv.close();
      System.exit(0);
    }
  )
}

void queryList() :
{
  int msgCode;
}
{
  (
    msgCode = query()
    < SEMICOLON >
    {
      System.out.print("DB_2013-11395> ");
      Message.print(msgCode);
    }
  )+
}

int query() :
{}
{
  (
    createTableQuery()
    {
      return Message.CREATE_TABLE;
    }
  )
| (
    dropTableQuery()
    {
      return Message.DROP_TABLE;
    }
  )
| (
    descQuery()
    {
      return Message.DESC;
    }
  )
| (
    showTablesQuery()
    {
      return Message.SHOW_TABLES;
    }
  )
| (
    insertQuery()
    {
      return Message.INSERT;
    }
  )
| (
    deleteQuery()
    {
      return Message.DELETE;
    }
  )
| (
    selectQuery()
    {
      return Message.SELECT;
    }
  )
}

void createTableQuery() :
{
  String s;
}
{
  < CREATE_TABLE >
  s = tableName()
  tableElementList(s)
}

void dropTableQuery() :
{}
{
  < DROP_TABLE >
  tableNameList()
}

void descQuery() :
{}
{
  < DESC >
  tableNameList()
}

void showTablesQuery() :
{}
{
  < SHOW_TABLES >
}

void insertQuery() :
{}
{
  < INSERT_INTO >
  tableName()
  insertColumnsAndSource()
}

void deleteQuery() :
{}
{
  < DELETE_FROM >
  tableName()
  (
    whereClause()
  )?
}

void selectQuery() :
{}
{
  < SELECT >
  selectList()
  tableExpression()
}

void selectList() :
{}
{
  < ASTERISK >
| (
    selectedColumn()
    (
      < COMMA >
      selectedColumn()
    )*
  )
}

void selectedColumn() :
{}
{
  tableAndColumnName()
  (
    < AS >
    columnName()
  )?
}

void tableExpression() :
{}
{
  fromClause()
  (
    whereClause()
  )?
}

void fromClause() :
{}
{
  < FROM >
  tableReferenceList()
}

void tableReferenceList() :
{}
{
  referedTable()
  (
    < COMMA >
    referedTable()
  )*
}

void referedTable() :
{}
{
  tableName()
  (
    < AS >
    tableName()
  )?
}

void whereClause() :
{}
{
  < WHERE >
  booleanValueExpression()
}

// < BOOLEAN TERM > | < BOOLEAN VALUE EXPRESSION > or < BOOLEAN TERM >
// changed to
// < BOOLEAN TERM > [{ or < BOOLEAN TERM > }...]
// to remove left resursion
void booleanValueExpression() :
{}
{
  booleanTerm()
  (
    < OR >
    booleanTerm()
  )*
}

// < BOOLEAN FACTOR > | < BOOLEAN TERM > and < BOOLEAN FACTOR >
// changed to
// < BOOLEAN FACTOR > [{ and < BOOLEAN FACTOR > }...]
// to remove left resursion
void booleanTerm() :
{}
{
  booleanFactor()
  (
    < AND >
    booleanFactor()
  )*
}

void booleanFactor() :
{}
{
  (
    < NOT >
  )?
  booleanTest()
}

void booleanTest() :
{}
{
  predicate()
| parenthesizedBooleanExpression()
}

void parenthesizedBooleanExpression() :
{}
{
  < LEFT_PAREN >
  booleanValueExpression()
  < RIGHT_PAREN >
}

// < COMPARISON PREDICATE > | < NULL PREDICATE > have common prefixes of length 2
// so it changed to
//   (
//     < COMPARABLE VALUE > < COMP OP > < COMP OPERAND >
//   )
// | (
//     < TABLE AND COLUMN NAME >
//     ( < COMP OP > < COMP OPERAND > | < NULL OPERATION > )
//   )
// to reduce length to 1
void predicate() :
{}
{
  (
    comparableValue()
    < COMP_OP >
    compOperand()
  )
| (
    tableAndColumnName()
    (
      (
        < COMP_OP >
        compOperand()
      )
    | nullOperation()
    )
  )
}

void compOperand() :
{}
{
  comparableValue()
| tableAndColumnName()
}

// [ < TABLE NAME > < PERIOD > ] < COLUMN NAME >
// need 2 LOOKAHEAD
void tableAndColumnName() :
{}
{
  (
    LOOKAHEAD(2)
    tableName()
    < PERIOD >
  )?
  columnName()
}

void nullOperation() :
{}
{
  < IS >
  (
    < NOT_NULL >
  | < NULL >
  )
}

void insertColumnsAndSource() :
{}
{
  (
    columnNameList()
  )?
  valueList()
}

void valueList() :
{}
{
  < VALUES >
  < LEFT_PAREN >
  value()
  (
    < COMMA >
    value()
  )*
  < RIGHT_PAREN >
}

void value() :
{}
{
  < NULL >
| comparableValue()
}

void comparableValue() :
{}
{
  < INT_VALUE >
| < CHAR_STRING >
| < DATE_VALUE >
}

void tableElementList(String tableName) :
{}
{
  < LEFT_PAREN >
  tableElement(tableName)
  (
    < COMMA >
    tableElement(tableName)
  )*
  < RIGHT_PAREN >
}

void tableElement(String tableName) :
{
  Node.ColumnDefinition cd;
  Node.PrimaryKeyConstraint pkc;
  Node.ReferentialConstraint rc;
}
{
  cd = columnDefinition()
  {
    cd.print();
  }
| pkc = primaryKeyConstraint()
  {
    pkc.print();
  }
| rc = referentialConstraint()
  {
    rc.print();
  }
}

Node.ColumnDefinition columnDefinition() :
{
  String s;
  Node.DataType dt;
  Node.ColumnDefinition cd = new Node.ColumnDefinition();
}
{
  s = columnName()
  {
    cd.setColumnName(s);
  }
  dt = dataType()
  {
    cd.setDataType(dt);
  }
  (
    < NOT_NULL >
    {
      cd.setNotNull(true);
    }
  )?
  {
    return cd;
  }
}

Node.PrimaryKeyConstraint primaryKeyConstraint() :
{
  Node.ColumnNameList cnl;
  Node.PrimaryKeyConstraint pkc = new Node.PrimaryKeyConstraint();
}
{
  < PRIMARY_KEY >
  cnl = columnNameList()
  {
    pkc.setKey(cnl);
    return pkc;
  }
}

Node.ReferentialConstraint referentialConstraint() :
{
  String s; Node.ColumnNameList cnl;
  Node.ReferentialConstraint rc = new Node.ReferentialConstraint();
}
{
  < FOREIGN_KEY >
  cnl = columnNameList()
  {
    rc.setReferencing(cnl);
  }
  < REFERENCES >
  s = tableName()
  cnl = columnNameList()
  {
    rc.setTableName(s);
    rc.setReferenced(cnl);
    return rc;
  }
}

Node.ColumnNameList columnNameList() :
{
  String s;
  Node.ColumnNameList cnl = new Node.ColumnNameList();
}
{
  < LEFT_PAREN >
  s = columnName()
  {
    cnl.addColumnName(s);
  }
  (
    < COMMA >
    s = columnName()
    {
      cnl.addColumnName(s);
    }
  )*
  < RIGHT_PAREN >
  {
    return cnl;
  }
}

Node.DataType dataType() :
{
  Node.DataType dt = new Node.DataType();
}
{
  (
    < INT >
    {
      dt.setType(Node.DataType.INT);
    }
  | < CHAR >
    {
      dt.setType(Node.DataType.CHAR);
    }
    < LEFT_PAREN >
    < INT_VALUE >
    {
      dt.setLength(Integer.parseInt(token.image));
    }
    < RIGHT_PAREN >
  | < DATE >
    {
      dt.setType(Node.DataType.DATE);
    }
  )
  {
    return dt;
  }
}

String tableName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image;
  }
}

void tableNameList() :
{}
{
  < ASTERISK >
| (
    tableName()
    (
      < COMMA >
      tableName()
    )*
  )
}

String columnName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image;
  }
}
