options
{
  static = true;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SimpleDBMSParser)

public class SimpleDBMSParser
{
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;

  public static void main(String args []) throws ParseException
  {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);

    while (true)
    {
      try
      {
        System.out.print("DB_2013-11395> ");
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)
  {
    switch (q)
    {
      case PRINT_SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE:
        System.out.println("\'CREATE TABLE\' requested");
        break;
      case PRINT_DROP_TABLE:
        System.out.println("\'DROP TABLE\' requested");
        break;
      case PRINT_DESC:
        System.out.println("\'DESC\' requested");
        break;
    }
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < DESC : "desc" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < ASTERISK : "*" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < SIGN : "+" | "-" >
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      System.exit(0);
    }
  )
}

void queryList() :
{
  int q;
}
{
  (
    q = query()
    < SEMICOLON >
    {
      System.out.print("DB_2013-11395> ");
      printMessage(q);
    }
  )+
}

int query() :
{}
{
  (
    createTableQuery()
    {
      return PRINT_CREATE_TABLE;
    }
  )
| (
    dropTableQuery()
    {
      return PRINT_DROP_TABLE;
    }
  )
| (
    descQuery()
    {
      return PRINT_DESC;
    }
  )
}

void createTableQuery() :
{}
{
  < CREATE_TABLE >
  tableName()
  tableElementList()
}

void dropTableQuery() :
{}
{
  < DROP_TABLE >
  tableNameList()
}

void descQuery() :
{}
{
  < DESC >
  tableNameList()
}

void tableElementList() :
{}
{
  < LEFT_PAREN >
  tableElement()
  (
    < COMMA >
    tableElement()
  )*
  < RIGHT_PAREN >
}

void tableElement() :
{}
{
  columnDefinition()
| tableConstraintDefinition()
}

void columnDefinition() :
{}
{
  columnName()
  dataType()
  (
    < NOT_NULL >
  )?
}

void tableConstraintDefinition() :
{}
{
  primaryKeyConstraint()
| referentialConstraint()
}

void primaryKeyConstraint() :
{}
{
  < PRIMARY_KEY >
  columnNameList()
}

void referentialConstraint() :
{}
{
  < FOREIGN_KEY >
  columnNameList()
  < REFERENCES >
  tableName()
  columnNameList()
}

void columnNameList() :
{}
{
  < LEFT_PAREN >
  columnName()
  (
    < COMMA >
    columnName()
  )*
  < RIGHT_PAREN >
}

void dataType() :
{}
{
  < INT >
| (
    < CHAR >
    < LEFT_PAREN >
    < INT_VALUE >
    < RIGHT_PAREN >
  )
| < DATE >
}

void tableName() :
{}
{
  < LEGAL_IDENTIFIER >
}

void tableNameList() :
{}
{
  < ASTERISK >
| (
    tableName()
    (
      < COMMA >
      tableName()
    )*
  )
}

void columnName() :
{}
{
  < LEGAL_IDENTIFIER >
}
