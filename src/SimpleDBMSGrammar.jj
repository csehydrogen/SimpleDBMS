options
{
  static = true;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SimpleDBMSParser)

import java.util.ArrayList;

public class SimpleDBMSParser
{
  private static SchemaManager sm = new SchemaManager();

  public static void main(String args []) throws ParseException
  {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    while (true)
    {
      try
      {
        Message.print(Message.EMPTY);
        parser.command();
      }
      catch (ParseException e)
      {
        if(e.currentToken != null)
          Message.print(Message.SYNTAX_ERROR, false);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < DESC : "desc" >
| < SHOW_TABLES : "show tables" >
| < INSERT_INTO : "insert into" >
| < DELETE_FROM : "delete from" >
| < SELECT : "select" >
| < AS : "as" >
| < FROM : "from" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < VALUES : "values" >
| < NULL : "null" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < ASTERISK : "*" >
| < QUOTE : "'" >
| < COMMA : "," >
| < PERIOD : "." >
| < UNDERSCORE : "_" >
| < SIGN : "+" | "-" >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >
                        | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >
| < NON_QUOTE_SPECIAL_CHARACTERS : [ "!", "#"-"&", "("-"/", ":"-"@", "["-"`", "{"-"~" ] >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < NN : < DIGIT > < DIGIT > >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      sm.close();
      System.exit(0);
    }
  )
}

void queryList() :
{
  Message msg;
}
{
  (
    msg = query()
    < SEMICOLON >
    {
      msg.print();
    }
  )+
}

Message query() :
{
  Message msg;
}
{
  (
    msg = createTableQuery()
    {
      return msg;
    }
  )
| (
    msg = dropTableQuery()
    {
      return msg;
    }
  )
| (
    descQuery()
    {
      return new Message(Message.EMPTY, false);
    }
  )
| (
    showTablesQuery()
    {
      return new Message(Message.SHOW_TABLES);
    }
  )
| (
    msg = insertQuery()
    {
      return msg;
    }
  )
| (
    deleteQuery()
    {
      return new Message(Message.EMPTY, false);
    }
  )
| (
    selectQuery()
    {
      return new Message(Message.EMPTY, false);
    }
  )
}

Message createTableQuery() :
{
  String s; Table t;
}
{
  < CREATE_TABLE >
  s = tableName()
  {
    if(sm.tableExists(s)) {
      Message.print(Message.TABLE_EXISTENCE_ERROR);
      throw new ParseException();
    }
    t = new Table(sm, s);
  }
  tableElementList(t)
  {
    t.save();
    return new Message(Message.CREATE_TABLE_SUCCESS, s);
  }
}

Message dropTableQuery() :
{
  ArrayList<String> l;
}
{
  < DROP_TABLE >
  l = tableNameList()
  {
    if(l == null) {
      sm.dropTables();
      return new Message(Message.DROP_SUCCESS_ALL_TABLES);
    }
    for(String tableName : l) {
      if(!sm.tableExists(tableName)) {
        Message.print(Message.NO_SUCH_TABLE);
        continue;
      }
      if(sm.getTable(tableName).isReferenced()) {
        Message.print(Message.DROP_REFERENCED_TABLE_ERROR, tableName);
        continue;
      }
      sm.dropTable(tableName);
      Message.print(Message.DROP_SUCCESS, tableName);
    }
    return new Message(Message.EMPTY, false);
  }
}

void descQuery() :
{
  ArrayList<String> l;
}
{
  < DESC >
  l = tableNameList()
  {
    if(l == null)
      l = sm.getTables();
    for(String tableName : l) {
      if(!sm.tableExists(tableName)) {
        Message.print(Message.NO_SUCH_TABLE);
        throw new ParseException();
      }
    }
    Message.print(Message.HORIZONTAL_LINE, false);
    for(String tableName : l) {
      sm.getTable(tableName).print();
      Message.print(Message.HORIZONTAL_LINE, false);
    }
  }
}

void showTablesQuery() :
{}
{
  < SHOW_TABLES >
}

Message insertQuery() :
{
  String s; Table t;
}
{
  < INSERT_INTO >
  s = tableName()
  {
    if(!sm.tableExists(s)) {
      Message.print(Message.NO_SUCH_TABLE);
      throw new ParseException();
    }
    t = sm.getTable(s);
  }
  insertColumnsAndSource(t)
  {
    return new Message(Message.INSERT_RESULT);
  }
}

void deleteQuery() :
{
  String tn;
  Table t;
  ExpTree.WhereExpression we = new ExpTree.TrueExpression();
}
{
  < DELETE_FROM >
  tn = tableName()
  {
    if(!sm.tableExists(tn)) {
      Message.print(Message.NO_SUCH_TABLE);
      throw new ParseException();
    }
    t = sm.getTable(tn);
  }
  (
    we = whereClause()
  )?
  {
    t.delete(we);  }
}

void selectQuery() :
{
  SelectHelper sh = new SelectHelper();
}
{
  < SELECT >
  selectList(sh)
  tableExpression(sh)
  {
    sh.process();  }
}

void selectList(SelectHelper sh) :
{}
{
  < ASTERISK >
| (
    selectedColumn(sh)
    (
      < COMMA >
      selectedColumn(sh)
    )*
  )
}

void selectedColumn(SelectHelper sh) :
{
  Foreign f;
  String alias = null;
}
{
  f = tableAndColumnName()
  (
    < AS >
    alias = columnName()
  )?
  {
    sh.selectColumn(f, alias);  }
}

void tableExpression(SelectHelper sh) :
{
  ExpTree.WhereExpression we = new ExpTree.TrueExpression();
}
{
  fromClause(sh)
  (
    we = whereClause()
  )?
  {
    sh.setWhereExpression(we);  }
}

void fromClause(SelectHelper sh) :
{}
{
  < FROM >
  tableReferenceList(sh)
}

void tableReferenceList(SelectHelper sh) :
{}
{
  referedTable(sh)
  (
    < COMMA >
    referedTable(sh)
  )*
}

void referedTable(SelectHelper sh) :
{
  String tn, alias = null;
}
{
  tn = tableName()  {
    if(!sm.tableExists(tn)) {
      Message.print(Message.SELECT_TABLE_EXISTENCE_ERROR, tn);
      throw new ParseException();
    }
  }
  (
    < AS >
    alias = tableName()
  )?
  {
    sh.addRecords(sm.getRecords(tn), alias);  }
}

ExpTree.BooleanValueExpression whereClause() :
{
  ExpTree.BooleanValueExpression bve;
}
{
  < WHERE >
  bve = booleanValueExpression()
  {
    return bve;  }
}

// < BOOLEAN TERM > | < BOOLEAN VALUE EXPRESSION > or < BOOLEAN TERM >
// changed to
// < BOOLEAN TERM > [{ or < BOOLEAN TERM > }...]
// to remove left resursion
ExpTree.BooleanValueExpression booleanValueExpression() :
{
  ExpTree.BooleanValueExpression bve = new ExpTree.BooleanValueExpression();
  ExpTree.BooleanTerm bt;
}
{
  bt = booleanTerm()
  {
    bve.addOp(bt);  }
  (
    < OR >
    bt = booleanTerm()
    {
      bve.addOp(bt);    }
  )*
  {
    return bve;  }
}

// < BOOLEAN FACTOR > | < BOOLEAN TERM > and < BOOLEAN FACTOR >
// changed to
// < BOOLEAN FACTOR > [{ and < BOOLEAN FACTOR > }...]
// to remove left resursion
ExpTree.BooleanTerm booleanTerm() :
{
  ExpTree.BooleanTerm bt = new ExpTree.BooleanTerm();
  ExpTree.BooleanFactor bf;
}
{
  bf = booleanFactor()
  {    bt.addOp(bf);
  }
  (
    < AND >
    bf = booleanFactor()
    {
      bt.addOp(bf);    }
  )*
  {
    return bt;  }
}

ExpTree.BooleanFactor booleanFactor() :
{
  ExpTree.BooleanFactor bf = new ExpTree.BooleanFactor();
  ExpTree.BooleanTest bt;
}
{
  (
    < NOT >
    {
      bf.setNot(true);    }
  )?
  bt = booleanTest()
  {
    bf.setOp(bt);
    return bf;  }
}

ExpTree.BooleanTest booleanTest() :
{
  ExpTree.BooleanTest bt;
}
{
  (    bt = predicate()
  | bt = parenthesizedBooleanExpression()
  )
  {
    return bt;  }
}

ExpTree.BooleanValueExpression parenthesizedBooleanExpression() :
{
  ExpTree.BooleanValueExpression bve;
}
{
  < LEFT_PAREN >
  bve = booleanValueExpression()
  < RIGHT_PAREN >
  {
    return bve;  }
}

// < COMPARISON PREDICATE > | < NULL PREDICATE > have common prefixes of length 2
// so it changed to
//   (
//     < COMPARABLE VALUE > < COMP OP > < COMP OPERAND >
//   )
// | (
//     < TABLE AND COLUMN NAME >
//     ( < COMP OP > < COMP OPERAND > | < NULL OPERATION > )
//   )
// to reduce length to 1
ExpTree.Predicate predicate() :
{
  ExpTree.CompOperand co;
  ExpTree.ComparisonPredicate cp;
  Foreign f;
  boolean b;
}
{
  (
    co = comparableValue()
    {
      cp = new ExpTree.ComparisonPredicate();
      cp.setLeftOp(co);    }
    < COMP_OP >
    {
      cp.setCompOp(token.image);
    }
    co = compOperand()
    {
      cp.setRightOp(co);
      return cp;
    }
  )
| (
    f = tableAndColumnName()
    (
      (
        < COMP_OP >
        {
          cp = new ExpTree.ComparisonPredicate();
          cp.setLeftOp(f);
          cp.setCompOp(token.image);        }
        co = compOperand()
        {
          cp.setRightOp(co);
          return cp;        }
      )
    | b = nullOperation()
      {
        ExpTree.NullPredicate np = new ExpTree.NullPredicate();
        np.setOp(f);
        np.setIsNull(b);
        return np;      }
    )
  )
}

ExpTree.CompOperand compOperand() :
{
  ExpTree.CompOperand co;
}
{
  (
    co = comparableValue()
  | co = tableAndColumnName()
  )
  {    return co;
  }
}

// [ < TABLE NAME > < PERIOD > ] < COLUMN NAME >
// need 2 LOOKAHEAD
Foreign tableAndColumnName() :
{
  String tn = null, cn;
}
{
  (
    LOOKAHEAD(2)
    tn = tableName()
    < PERIOD >
  )?
  cn = columnName()
  {
    return new Foreign(tn, cn);
  }
}

boolean nullOperation() :
{}
{
  < IS >
  (
    < NOT_NULL >
    {
      return false;
    }
  | < NULL >
    {
      return true;
    }
  )
}

void insertColumnsAndSource(Table t) :
{
  ArrayList<String> cnl = null;
  ArrayList<Value> vl;
}
{
  (
    cnl = columnNameList()
  )?
  vl = valueList()
  {
    t.insert(cnl, vl);
  }
}

ArrayList<Value> valueList() :
{
  Value v;
  ArrayList<Value> l = new ArrayList<Value>();
}
{
  < VALUES >
  < LEFT_PAREN >
  v = value()
  {
    l.add(v);
  }
  (
    < COMMA >
    v = value()
    {
      l.add(v);
    }
  )*
  < RIGHT_PAREN >
  {
    return l;
  }
}

Value value() :
{
  Value v;
}
{
  (
    < NULL >
    {
      v = new Value();
      v.setType(Value.NULL);
    }
  | v = comparableValue()
  )
  {
    return v;
  }
}

Value comparableValue() :
{
  Value v = new Value();
}
{
  (
    < INT_VALUE >
    {
      v.setType(Value.INT);
      v.setValInt(Integer.parseInt(token.image));
    }
  | < CHAR_STRING >
    {
      v.setType(Value.CHAR);
      v.setValStr(token.image.substring(1, token.image.length() - 1));
    }
  | < DATE_VALUE >
    {
      v.setType(Value.DATE);
      v.setValStr(token.image);
    }
  )
  {
    return v;
  }
}

void tableElementList(Table t) :
{}
{
  < LEFT_PAREN >
  tableElement(t)
  (
    < COMMA >
    tableElement(t)
  )*
  < RIGHT_PAREN >
}

void tableElement(Table t) :
{}
{
  columnDefinition(t)
| primaryKeyConstraint(t)
| referentialConstraint(t)
}

void columnDefinition(Table t) :
{
  String s;
  Column col = new Column();
}
{
  s = columnName()
  {
    col.setName(s);
  }
  dataType(col)
  (
    < NOT_NULL >
    {
      col.setNotNull(true);
    }
  )?
  {
    col.setOrd(t.getNumOfCols());
    t.addColumn(col);
  }
}

void primaryKeyConstraint(Table t) :
{
  ArrayList<String> l;
}
{
  < PRIMARY_KEY >
  l = columnNameList()
  {
    t.addPrimaryKey(l);
  }
}

void referentialConstraint(Table t) :
{
  String s; ArrayList<String> referencing, referenced;
}
{
  < FOREIGN_KEY >
  referencing = columnNameList()
  < REFERENCES >
  s = tableName()
  referenced = columnNameList()
  {
    t.addForeignKey(referencing, s, referenced);
  }
}

ArrayList<String> columnNameList() :
{
  String s;
  ArrayList<String> l = new ArrayList<String>();
}
{
  < LEFT_PAREN >
  s = columnName()
  {
    l.add(s);
  }
  (
    < COMMA >
    s = columnName()
    {
      l.add(s);
    }
  )*
  < RIGHT_PAREN >
  {
    return l;
  }
}

// set type and length of column
void dataType(Column col) :
{}
{
  (
    < INT >
    {
      col.setType(Column.INT);
    }
  | < CHAR >
    {
      col.setType(Column.CHAR);
    }
    < LEFT_PAREN >
    < INT_VALUE >
    {
      int len = Integer.parseInt(token.image);
      if(len < 1) {
        Message.print(Message.CHAR_LENGTH_ERROR);
        throw new ParseException();
      }
      col.setLength(len);
    }
    < RIGHT_PAREN >
  | < DATE >
    {
      col.setType(Column.DATE);
    }
  )
}

// return table name as lowercase string
String tableName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}

// return null if *
ArrayList<String> tableNameList() :
{}
{
  < ASTERISK >
  {
    return null;
  }
| {
    String s;
    ArrayList<String> l = new ArrayList<String>();
  }
  s = tableName()
  {
    l.add(s);
  }
  (
    < COMMA >
    s = tableName()
    {
      l.add(s);
    }
  )*
  {
    return l;
  }
}

// return column name as lowercase string
String columnName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}
